#!/usr/bin/env python3


import rospy
import numpy as np
import matplotlib.pyplot as plt
import random
import time
import sys
import os
import shutil
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
from collections import deque
from collections import namedtuple
from std_msgs.msg import Float32MultiArray
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from torch.autograd import Variable
from torch.distributions import Categorical
from torch.distributions import Normal

from env_mobile_robot_SAC import Env

from torch.utils.tensorboard import SummaryWriter

from std_srvs.srv import Empty

from collections import namedtuple
import collections, random




#Hyperparameters
lr_pi           = 0.0001
lr_q            = 0.0005
init_alpha      = 0.001
gamma           = 0.995
batch_size      = 128
buffer_limit    = 500000
tau             = 0.001    # for target network soft update
target_entropy  = -0.01       # for automated alpha update
lr_alpha        = 0.001    # for automated alpha update

class ReplayBuffer():
    def __init__(self):
        self.buffer = collections.deque(maxlen=buffer_limit)

    def put(self, transition):
        self.buffer.append(transition)
    
    def sample(self, n):
        mini_batch = random.sample(self.buffer, n)
        s_lst, a_lst, r_lst, s_prime_lst, done_mask_lst = [], [], [], [], []

        for transition in mini_batch:
            s, a, r, s_prime, done = transition
            s_lst.append(s)
            a_lst.append([a])
            r_lst.append([r])
            s_prime_lst.append(s_prime)
            done_mask = 0.0 if done else 1.0 
            done_mask_lst.append([done_mask])
            
        
        s_batch       = torch.tensor(s_lst, dtype=torch.float).to(DEVICE)
        a_batch       = torch.tensor(a_lst, dtype=torch.float).to(DEVICE)
        r_batch       = torch.tensor(r_lst, dtype=torch.float).to(DEVICE)
        s_prime_batch = torch.tensor(s_prime_lst, dtype=torch.float).to(DEVICE)
        done_batch    = torch.tensor(done_mask_lst, dtype=torch.float).to(DEVICE)
        
        r_batch = (r_batch - r_batch.mean()) / (r_batch.std() + 1e-7)
        
        return s_batch, a_batch, r_batch, s_prime_batch, done_batch
        
    
    def size(self):
        return len(self.buffer)

class PolicyNet(nn.Module):
    def __init__(self, learning_rate):
        super(PolicyNet, self).__init__()
        self.fc1 = nn.Linear(4, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 32)
        self.fc_mu = nn.Linear(32,1)
        self.fc_std  = nn.Linear(32,1)
        self.optimizer = optim.Adam(self.parameters(), lr=learning_rate)

        self.log_alpha = torch.tensor(np.log(init_alpha)).to(DEVICE)
        self.log_alpha.requires_grad = True
        self.log_alpha_optimizer = optim.Adam([self.log_alpha], lr=lr_alpha)

    def forward(self, x):
        x = F.leaky_relu(self.fc1(x))
        x = F.leaky_relu(self.fc2(x))
        x = F.leaky_relu(self.fc3(x))
        mu = self.fc_mu(x)
        std = F.softplus(self.fc_std(x))
        dist = Normal(mu, std)
        action = dist.rsample()
        log_prob = dist.log_prob(action)
        real_action = torch.tanh(action)
        real_log_prob = log_prob - torch.log(1-torch.tanh(action).pow(2) + 1e-7)
        return real_action, real_log_prob

    def train_net(self, q1, q2, mini_batch):
        s, _, _, _, _ = mini_batch
        a, log_prob = self.forward(s)
        entropy = -self.log_alpha.exp() * log_prob

        q1_val, q2_val = q1(s,a), q2(s,a)
        q1_q2 = torch.cat([q1_val, q2_val], dim=1)
        min_q = torch.min(q1_q2, 1, keepdim=True)[0]

        loss = -min_q - entropy # for gradient ascent
        self.optimizer.zero_grad()
        loss.mean().backward()
        self.optimizer.step()

        self.log_alpha_optimizer.zero_grad()
        alpha_loss = -(self.log_alpha.exp() * (log_prob + target_entropy).detach()).mean()
        alpha_loss.backward()
        self.log_alpha_optimizer.step()
        
        return min_q, entropy, -loss, self.log_alpha.exp()

class QNet(nn.Module):
    def __init__(self, learning_rate):
        super(QNet, self).__init__()
        self.fc_s = nn.Linear(4, 64)
        self.fc_a = nn.Linear(1,64)
        self.fc_1 = nn.Linear(128,64)
        self.fc_2 = nn.Linear(64,32)        
        self.fc_out = nn.Linear(32,1)
        self.optimizer = optim.Adam(self.parameters(), lr=learning_rate)

    def forward(self, x, a):
        h1 = F.leaky_relu(self.fc_s(x))
        h2 = F.leaky_relu(self.fc_a(a))
        cat = torch.cat([h1,h2], dim=1)
        q = F.leaky_relu(self.fc_1(cat))
        q = F.leaky_relu(self.fc_2(q))
        q = self.fc_out(q)
        return q

    def train_net(self, target, mini_batch):
        s, a, r, s_prime, done = mini_batch
        loss = F.smooth_l1_loss(self.forward(s, a) , target)
        self.optimizer.zero_grad()
        loss.mean().backward()
        self.optimizer.step()

    def soft_update(self, net_target):
        for param_target, param in zip(net_target.parameters(), self.parameters()):
            param_target.data.copy_(param_target.data * (1.0 - tau) + param.data * tau)

def calc_target(pi, q1, q2, mini_batch):
    s, a, r, s_prime, done = mini_batch

    with torch.no_grad():
        a_prime, log_prob= pi(s_prime)
        entropy = -pi.log_alpha.exp() * log_prob
        q1_val, q2_val = q1(s_prime,a_prime), q2(s_prime,a_prime)
        q1_q2 = torch.cat([q1_val, q2_val], dim=1)
        min_q = torch.min(q1_q2, 1, keepdim=True)[0]
        target = r + gamma * done * (min_q + entropy)

    return target
    
if __name__ == '__main__':
    rospy.init_node('mobile_robot_sac')
    
    date = '1210_reward_norm_tar_ent_-001'
    save_dir = "/home/jm-kim/catkin_ws/src/myrobot/src/SAC/saved_model/" + date 
    if not os.path.isdir(save_dir):
        os.mkdir(save_dir)
    save_dir += "/"
        
    shutil.copyfile('/home/jm-kim/catkin_ws/src/myrobot/src/SAC/env_mobile_robot_SAC.py', save_dir+'env.txt')
    shutil.copyfile('/home/jm-kim/catkin_ws/src/myrobot/src/SAC/mobile_robot_SAC.py', save_dir+'agt.txt')
    
    writer = SummaryWriter('SAC_log/'+date)
    dev = "cuda" if torch.cuda.is_available() else "cpu"
    #dev = 'cpu'
    DEVICE = torch.device(dev)
    print("DEVICE : ", DEVICE)  
    state_size = 4
    action_size = 1
    
    MAX_STEP_SIZE = 3000
    
    sim_rate = rospy.Rate(20)
    unpause_proxy = rospy.ServiceProxy('gazebo/unpause_physics', Empty)
    pause_proxy = rospy.ServiceProxy('gazebo/pause_physics', Empty)
    
    env = Env(action_size)
    memory = ReplayBuffer()
    q1, q2,  = QNet(lr_q).to(DEVICE), QNet(lr_q).to(DEVICE)
    q1_target, q2_target = QNet(lr_q).to(DEVICE), QNet(lr_q).to(DEVICE)
    pi = PolicyNet(lr_pi).to(DEVICE)

    q1_target.load_state_dict(q1.state_dict())
    q2_target.load_state_dict(q2.state_dict())

    score = 0.0
    print_interval = 1

    for n_epi in range(10000):
        s = env.reset()
        done = False
        score, q, ent, actor_loss, alpha = 0.0, 0.0, 0.0, 0.0, 0.0
        
        for step in range(MAX_STEP_SIZE): #while not done:
            a, log_prob= pi(torch.from_numpy(s).float().to(DEVICE))
            s_prime, r, done, info = env.step([1.5*a.item()])
            memory.put((s, a.item(), r, s_prime, done))
            score +=r
            s = s_prime
            #sim_rate.sleep()
            if done:
                s = env.reset()
             
        
            if memory.size()>10000:
                #pause_proxy()
                mini_batch = memory.sample(batch_size)
                td_target = calc_target(pi, q1_target, q2_target, mini_batch)
                q1.train_net(td_target, mini_batch)
                q2.train_net(td_target, mini_batch)
                min_q, entropy, loss, alp = pi.train_net(q1, q2, mini_batch)
                q1.soft_update(q1_target)
                q2.soft_update(q2_target)
                    
                q += min_q.detach().cpu().numpy().mean()
                ent += entropy.detach().cpu().numpy().mean()
                actor_loss += loss.detach().cpu().numpy().mean()
                alpha += alp.detach().cpu().numpy().mean()
                #unpause_proxy()
            if memory.size()<=10000:
                sim_rate.sleep()         
        
                
        print("EP:{}, Avg_Score:{:.1f}, Q:{:.1f}, Entr:{:.1f}, Act_los:{:.1f}, Alpha:{:.3f}".format(n_epi, score, q/3000, ent/3000, actor_loss/3000, pi.log_alpha.exp()))
        writer.add_scalar("Score", score, n_epi)
        writer.add_scalar("Q_Value", q/3000, n_epi)
        writer.add_scalar("Entropy", ent/3000 ,n_epi)
        writer.add_scalar("Actor_Loss", actor_loss/3000 ,n_epi)
        writer.add_scalar("alpha", alpha/3000 ,n_epi)
        
        #if pi.log_alpha.exp() > 1.0:
        #    pi.log_alpha += np.log(0.99)
        
        #if n_epi%print_interval==0 and n_epi!=0:
        #    print("# of episode :{}, avg score : {:.1f} alpha:{:.4f}".format(n_epi, score/print_interval, pi.log_alpha.exp()))
        #    writer.add_scalar("Score", score / print_interval, n_epi)
        #    score = 0.0
            
        if n_epi % 2 == 0: 
            torch.save(pi.state_dict(), save_dir + "sac_actor_"+date+"_EP"+str(n_epi)+".pt")










    
    
    
    
    
    
    
    
    
    
    
    
    

